#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('image:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error, callback) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;
    
    let reason = '';
    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            reason = bind + ' requires elevated privileges';
            callback(new Error(reason));
            console.error(reason);
            process.exit(1);
            break;
        case 'EADDRINUSE':
            reason = bind + ' is already in use';
            callback(new Error(reason));
            console.error(reason);
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening(server) {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

var server;
function start(callback) {
    /**
     * Create HTTP server.
     */

    server = http.createServer(app);
    require('../routes/ws.js')(server);

    /**
     * Listen on provided port, on all network interfaces.
     */
    server.listen(port);
    server.on('error', (error) => {
        onError(error, callback);
    });
    server.on('listening', () => {
        onListening(server);
        callback && callback(port);
    });
}

(!process.env.ELECTRON) && start();
module.exports = {
    start: start,
    stop(){
        server && server.close();
    }
}
